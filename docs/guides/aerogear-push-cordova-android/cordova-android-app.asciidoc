---
layout: basic
title: Apache Cordova android application
---

Creating a Cordova push application
-----------------------------------

Before we start, please install link:https://github.com/apache/cordova-cli/[Apache Cordova CLI], which is the command line tool to build, deploy and manage Cordova-based applications. Currently cordova 3.0 has some issues be sure that you use 2.9!

Next you need to _install_ our *Cordova Unified Push Plugin*

Sample App
~~~~~~~~~~

Creating a Cordova app is simple:

[source,c]
----
cordova create FolderOfTheApp com.my.id.AppName AppName
cd FolderOfTheApp
cordova platform add android
cordova plugin add org.jboss.aerogear.cordova.push
----

Build the android application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is now time to build the actual android project:

[source,c]
----
cordova build
----

In order to start playing with the project, you can import it with your favorite IDE the android project is located in +platforms/android+.

The JavaScript
~~~~~~~~~~~~~~

For the purpose of this demo we continue to use the +js/index.js+ file for our application. Below is the entire file:

[source,javascript]
----
// handle the incoming notifications
function onNotification(e) {
    // if this flag is set, this notification happened while we were in the foreground.
    // you might want to play a sound to get the user's attention, throw up a dialog, etc.
    if (e.foreground) {
        console.log('--INLINE NOTIFICATION--');
        // if the notification contains a soundname, play it.
        var my_media = new Media("/android_asset/www/" + e.sound);
        my_media.play();
    }
    else {   // otherwise we were launched because the user touched a notification in the notification tray.
        if (e.coldstart) {
            console.log('--COLDSTART NOTIFICATION--');
        }
        else {
            console.log('--BACKGROUND NOTIFICATION--');
        }
    }

    //only on ios
    if (e.badge) {
      push.setApplicationIconBadgeNumber(successHandler, e.badge);
    }    

    console.log('MESSAGE -> MSG: ' + e.alert);
}

var app = {
    initialize: function () {
        this.bind();
    },
    bind: function () {
        document.addEventListener('deviceready', this.deviceready, false);
    },
    deviceready: function () {
        app.initAeroGearPush();
        app.report('deviceready');
    },
    report: function(id) {
        console.log("report:" + id);
        // hide the .pending <p> and show the .complete <p>
        document.querySelector('#' + id + ' .pending').className += ' hide';
        var completeElem = document.querySelector('#' + id + ' .complete');
        completeElem.className = completeElem.className.split('hide').join('');
    },
    initAeroGearPush: function () {
        var config = {
          senderID: "<senderID>",
          pushServerURL: "https://SERVER:PORT/CONTEXT/",
          variantID: "<variantID>",
          variantSecret: "<variantSecret>"
        }

        push.register(
            function (result) {
                console.log('success: ' + result);
            },
            function (error) {
                console.log('error: ' + error);
            }, 
            {"ecb": "onNotification", pushConfig: config});
    }
};
----

Most of the code is actually already there, generated by Apache Cordova, so let's dive into the details.

Push Notification registry and setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the beginning of the file there is a +onNotification+ function, which acts as a central hub invoked by the Cordova PushPlugin when it is time to deliver an push notification to the application. Now, If the application is not running, or is in the background, Cordova PushPlugin by default, will display the notification up into the notification drawer. If the user decides to click on it, the application would be brought to the foreground, and the +onNotification+ callback function would be called with the event set to 'alert'. Here we can distinguish whether the application was in the foreground, cold-started (that is started running when the notification was clicked), or in the background when the notification was received. Depending on the state, you may decide to perform different operations.

[source,javascript]
----
function onNotification(e) {
    // if this flag is set, this notification happened while we were in the foreground.
    // you might want to play a sound to get the user's attention, throw up a dialog, etc.
    if (e.foreground) {
        console.log('--INLINE NOTIFICATION--');
        // if the notification contains a soundname, play it.
        var my_media = new Media("/android_asset/www/" + e.payload.sound);
        my_media.play();
    }
    else {   // otherwise we were launched because the user touched a notification in the notification tray.
        if (e.coldstart) {
            console.log('--COLDSTART NOTIFICATION--');
        }
        else {
            console.log('--BACKGROUND NOTIFICATION--');
        }
    }

    //only on ios
    if (e.badge) {
      push.setApplicationIconBadgeNumber(successHandler, e.badge);
    }    

    console.log('MESSAGE -> MSG: ' + e.alert);
}
----

To trigger the setup of the _PushPlugin_ we have added a +initAeroGearPush+ function onto the +app+ scope, the function is invoked by the +onDeviceReady+ function which itself is invoked once the Apache Cordova related initialization is done. It is responsible to get a reference of the Plugin's +push+ object in order to invoke its +register+ function which will register the device with CGM and Unified Push Server. Notice, that the function apart from the usual success/failure callbacks, require as parameters the Google Sender ID the Unified Push server location, VariantId and secret and the callback function name which would be invoked by the PushPlugin to pass along the notification events. Here we use the 'onNotification' function name that we defined earlier.

[source,javascript]
----
initAeroGearPush: function() {

    var config = {
      senderID: "e.g. 4815162342",  
      pushServerURL: "https://SERVER:PORT/CONTEXT/",
      variantID: "e.g. 610030de-904a-4e50-8043-37978ab32296",
      variantSecret: "e.g. b83186ae-127a-40bf-8fa7-a9eb41b2b33f"
    }

    // set callbacks for dealing with the registration error and success.
    // The options specify the interest of the different APNs message event types.
    pushNotification.register(successCallback, errorCallback, {"ecb": "onNotification", pushConfig: config});
}
----

Test the app
~~~~~~~~~~~~

Now run the app, you will see the default Apache Cordova page from the generated project. Now put the app into the background, by clicking the home button.


Sending messages
~~~~~~~~~~~~~~~~

The last chapter shows how to link:../send-push[send messages], using the _AeroGear UnifiedPush Server_!

